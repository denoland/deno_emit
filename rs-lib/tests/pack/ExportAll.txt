# mod.ts
import { myValue1, myValue2, Test } from "./a.js";

const obj = {
  myValue1,
};

console.log(myValue1);
console.log(myValue2);
console.log(Test.Value);

# a.js
export * from "./b.ts";

export const myValue1 = 1;

# b.ts
// it should not re-export this
export const myValue1 = 2;
export const myValue2 = 3;

export enum Test {
  Value = 1,
}

# output.js
const pack0 = {
  Test: undefined,
  myValue1: undefined,
  myValue2: undefined,
};
const pack2 = {
  Test: undefined,
  myValue1: undefined,
  myValue2: undefined,
};

// b.ts
(() => {
// it should not re-export this
const myValue1 = 2;
const myValue2 = 3;
var Test;
(function(Test) {
    Test[Test["Value"] = 1] = "Value";
})(Test || (Test = {}));
Object.defineProperty(pack2, "myValue1", { get: () => myValue1 });
Object.defineProperty(pack2, "myValue2", { get: () => myValue2 });
Object.defineProperty(pack2, "Test", { get: () => Test });
})();

// a.js
(() => {
const myValue1 = 1;
Object.defineProperty(pack0, "myValue1", { get: () => myValue1 });
Object.defineProperty(pack0, "Test", { get: () => pack2.Test });
Object.defineProperty(pack0, "myValue2", { get: () => pack2.myValue2 });
})();

// mod.ts
const obj = {
  myValue1: pack0.myValue1,
};

console.log(pack0.myValue1);
console.log(pack0.myValue2);
console.log(pack0.Test.Value);
